/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_BEFORE {
        ext.args = '--quiet'
        ext.suffix = 'before'
    }

    withName: FASTQC_AFTER {
        ext.args = '--quiet'
        ext.suffix = 'after'
    }

    withName: FASTP {
        ext.args = params.deduplicate ? '--include_unmerged --dedup' : '--include_unmerged'
        publishDir = [
            path: { "${params.outdir}/fastp/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }



    withName: 'ADNAMAP:ALIGN_BOWTIE2:BOWTIE2_ALIGN' {
        ext.args = "--very-sensitive -N 1"
        ext.args2 = "-F 4"
        ext.merged = params.save_merged
    }

    withName: 'ADNAMAP:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/alignment_after_lca/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: QUALIMAP_BAMQC {
        publishDir = [
            path: { "${params.outdir}/qualimap/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
        clusterOptions = { "-S /bin/bash -V -l h_vmem=${(task.memory.toGiga() * 2)}G" }
    }

    withName: DAMAGEPROFILER {
        publishDir = [
            path: { "${params.outdir}/damageprofiler/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
        clusterOptions = { "-S /bin/bash -V -l h_vmem=${(task.memory.toGiga() * 2)}G" }
    }

    withName: 'ADNAMAP:VARIANT_CALLING:FREEBAYES' {
        publishDir = [
            path: { "${params.outdir}/freebayes/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
        ext.args = [
            "-p ${params.freebayes_ploidy}",
            "-q ${params.freebayes_min_basequality}",
            "-F ${params.freebayes_minallelefreq}",
            "-m ${params.freebayes_min_mapping_quality}",
            "--min-coverage ${params.freebayes_min_coverage}",
            "--limit-coverage ${params.freebayes_limit_coverage}",
            params.freebayes_report_all_sites ? "--report-monomorphic" : '',
        ].join(' ').trim()
    }

// -m 30 -q 20 -R 0 -S 0

    withName: "ADNAMAP:VARIANT_CALLING:(BCFTOOLS_INDEX_PRE|BCFTOOLS_INDEX_POST)" {
        ext.args = "-t"
    }

    withName: 'ADNAMAP:VARIANT_CALLING:BCFTOOLS_VIEW' {
        publishDir = [
            path: { "${params.outdir}/bcftools/view/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
        ext.args =  "-i 'QUAL>=${params.bcftools_view_high_variant_quality} || (QUAL>=${params.bcftools_view_medium_variant_quality} && FORMAT/AO>=${params.bcftools_view_minimal_allelesupport}) || INFO/NUMALT=0'"
        ext.prefix = { "${meta.id}_filtered" }
    }

    withName: 'ADNAMAP:VARIANT_CALLING:BCFTOOLS_CONSENSUS' {
        publishDir = [
            path: { "${params.outdir}/bcftools/consensus/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
        ext.args = [
            "--absent N",
        ].join(' ').trim()
    }

    withName: 'ADNAMAP:VARIANT_CALLING:BCFTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/bcftools/stats/${meta.genome_name}/${meta.id}" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: SAM2LCA {
        publishDir = [
            path: { "${params.outdir}/sam2lca/${meta.id}" },
            mode: params.publish_dir_mode,
        ]
        ext.args = [
            params.sam2lca_db ? "-a ${params.sam2lca_acc2tax}" : "-a adnamap",
            params.sam2lca_db ? "-t ncbi" : "-t ncbi_local",
            "-r ${params.sam2lca_split_rank}",
            "-n ${params.sam2lca_split_n}"
        ].join(' ').trim()

        ext.args2 = params.sam2lca_identity ? "-i ${params.sam2lca_identity}" : ""
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc/" },
            mode: params.publish_dir_mode,
        ]
    }

}
